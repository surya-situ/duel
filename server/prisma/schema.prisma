// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                      String       @id @default(uuid()) @db.Uuid
  name                    String       @db.VarChar(191)
  email                   String       @unique
  password                String
  password_reset_token    String?
  token_send_at           DateTime?
  email_verified_at       DateTime?
  email_verified_token    String?
  created_at              DateTime     @default(now())
  duel                    Duel[]       // One to many relationship
}

model Duel {
  id                      String       @id @default(uuid()) @db.Uuid
  user                    User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id                 String       @db.Uuid 
  title                   String
  description             String?
  image                   String
  created_at              DateTime     @default(now())
  expire_at               DateTime
  DuelItem                DuelItem[]
  DuelComments            DuelComments[]
}

model DuelItem {
  id                      String       @id @default(uuid()) @db.Uuid
  duel                    Duel         @relation(fields: [duel_id], references: [id], onDelete: Cascade)
  duel_id                 String       @db.Uuid
  image                   String
  count                   Int          @default(0)
  created_at              DateTime     @default(now())
}

model DuelComments {
  id                      String       @id @default(uuid()) @db.Uuid
  duel                    Duel         @relation(fields: [duel_id], references: [id], onDelete: Cascade)
  duel_id                 String       @db.Uuid
  comment                 String
  created_at              DateTime     @default(now())
}